# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];
  boot = {
    kernelPackages = pkgs.linuxPackages_latest;
    loader = {
      systemd-boot.enable = true;
      efi = {
        canTouchEfiVariables = true;
      };
    };
    initrd = {
      enable = true;
      availableKernelModules = ["xhci_pci" "thunderbolt" "nvme" "usb_storage" "sd_mod"];
      kernelModules = [
        "dm-snapshot"
        "i915"
      ];
      luks.devices = {
        luksroot = {
          device = "/dev/disk/by-uuid/0fe72388-7f89-44f2-89c8-e50291c6a183";
          preLVM = true;
        };
      };
    };

    kernelModules = ["kvm-intel"];
    extraModulePackages = [];
    binfmt.emulatedSystems = ["aarch64-linux"];
    extraModprobeConfig = ''
    '';
  };
  environment.variables = {
    VDPAU_DRIVER = lib.mkIf config.hardware.opengl.enable (lib.mkDefault "va_gl");
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/0e76f422-4250-4803-8916-6613ca2a2894";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/C245-E27F";
    fsType = "vfat";
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/71a1a6f7-ed36-479f-b505-cf038d20a467";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware = {
    enableRedistributableFirmware = true;
    cpu.intel.updateMicrocode = true;
    opengl.extraPackages = with pkgs; [
      (
        if (lib.versionOlder (lib.versions.majorMinor lib.version) "23.11")
        then vaapiIntel
        else intel-vaapi-driver
      )
      libvdpau-va-gl
      intel-media-driver
    ];
  };
  services.fstrim.enable = lib.mkDefault true;
}
